"use client";

import { useState, useEffect } from "react";
import { useLanguage } from "./LanguageContext";

export interface Recipe {
  title: string;
  description: string;
  ingredients: string[] | Array<{ ingredient: string; quantity: string }>;
  instructions: string | string[];
  prepTime: string;
  cookTime: string;
}

// Helper function to format ingredients
const formatIngredient = (ingredient: string | { ingredient: string; quantity: string }): string => {
  if (typeof ingredient === 'string') {
    return ingredient;
  }
  return `${ingredient.quantity} ${ingredient.ingredient}`;
};

// Helper function to format instructions
const formatInstructions = (instructions: string | string[]): string => {
  if (typeof instructions === 'string') {
    return instructions;
  }
  return instructions.map((step, index) => `${index + 1}. ${step}`).join('\n\n');
};

// Helper function to save recipe to localStorage
const saveRecipe = (recipe: Recipe) => {
  try {
    const savedRecipes = JSON.parse(localStorage.getItem('savedRecipes') || '[]');
    const recipeWithId = {
      ...recipe,
      id: Date.now(),
      savedAt: new Date().toISOString()
    };
    
    // Check if recipe already exists (by title)
    const existingIndex = savedRecipes.findIndex((r: Recipe) => r.title === recipe.title);
    if (existingIndex >= 0) {
      savedRecipes[existingIndex] = recipeWithId;
    } else {
      savedRecipes.push(recipeWithId);
    }
    
    localStorage.setItem('savedRecipes', JSON.stringify(savedRecipes));
    return true;
  } catch (error) {
    console.error('Failed to save recipe:', error);
    return false;
  }
};

// Helper function to check if recipe is saved
const isRecipeSaved = (recipe: Recipe): boolean => {
  try {
    const savedRecipes = JSON.parse(localStorage.getItem('savedRecipes') || '[]');
    return savedRecipes.some((r: Recipe) => r.title === recipe.title);
  } catch {
    return false;
  }
};

// Helper function to share recipe
const shareRecipe = async (recipe: Recipe) => {
  const recipeText = `
${recipe.title}

${recipe.description}

INGREDIENTS:
${Array.isArray(recipe.ingredients) ? recipe.ingredients.map(formatIngredient).join('\n') : recipe.ingredients}

INSTRUCTIONS:
${formatInstructions(recipe.instructions)}

Prep Time: ${recipe.prepTime}
Cook Time: ${recipe.cookTime}

Generated by Fridge to Feast
  `.trim();

  if (navigator.share) {
    try {
      await navigator.share({
        title: recipe.title,
        text: recipeText,
        url: window.location.href
      });
      return true;
    } catch (error) {
      console.error('Share failed:', error);
      return false;
    }
  } else {
    // Fallback: copy to clipboard
    try {
      await navigator.clipboard.writeText(recipeText);
      return true;
    } catch (error) {
      console.error('Clipboard copy failed:', error);
      return false;
    }
  }
};

// Helper function to print recipe
const printRecipe = (recipe: Recipe) => {
  const printWindow = window.open('', '_blank');
  if (!printWindow) return false;

  const recipeHtml = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${recipe.title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .recipe-header { text-align: center; margin-bottom: 30px; }
        .recipe-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
        .recipe-description { color: #666; margin-bottom: 20px; }
        .recipe-meta { display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; }
        .section { margin-bottom: 25px; }
        .section-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; border-bottom: 2px solid #f97316; padding-bottom: 5px; }
        .ingredients-list { list-style: none; padding: 0; }
        .ingredients-list li { padding: 5px 0; border-bottom: 1px solid #eee; }
        .instructions-list { list-style: decimal; padding-left: 20px; }
        .instructions-list li { margin-bottom: 10px; }
        @media print { body { margin: 0; } }
      </style>
    </head>
    <body>
      <div class="recipe-header">
        <div class="recipe-title">${recipe.title}</div>
        <div class="recipe-description">${recipe.description}</div>
        <div class="recipe-meta">
          <span>Prep: ${recipe.prepTime}</span>
          <span>Cook: ${recipe.cookTime}</span>
        </div>
      </div>
      
      <div class="section">
        <div class="section-title">Ingredients</div>
        <ul class="ingredients-list">
          ${Array.isArray(recipe.ingredients) ? recipe.ingredients.map(formatIngredient).map(ing => `<li>${ing}</li>`).join('') : `<li>${recipe.ingredients}</li>`}
        </ul>
      </div>
      
      <div class="section">
        <div class="section-title">Instructions</div>
        <ol class="instructions-list">
          ${Array.isArray(recipe.instructions) ? recipe.instructions.map(step => `<li>${step}</li>`).join('') : `<li>${recipe.instructions}</li>`}
        </ol>
      </div>
      
      <div style="text-align: center; margin-top: 40px; color: #666; font-size: 12px;">
        Generated by Fridge to Feast
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(recipeHtml);
  printWindow.document.close();
  printWindow.focus();
  printWindow.print();
  return true;
};

export default function RecipeDisplay({ 
  recipes, 
  loading, 
  onClear 
}: { 
  recipes: Recipe[]; 
  loading?: boolean; 
  onClear?: () => void;
}) {
  const [savedStates, setSavedStates] = useState<{ [key: string]: boolean }>({});
  const [actionFeedback, setActionFeedback] = useState<{ [key: string]: string }>({});
  const [expandedInstructions, setExpandedInstructions] = useState<{ [key: string]: boolean }>({});
  const { t } = useLanguage();

  // Initialize saved states when recipes change
  useEffect(() => {
    const states: { [key: string]: boolean } = {};
    recipes.forEach(recipe => {
      states[recipe.title] = isRecipeSaved(recipe);
    });
    setSavedStates(states);
  }, [recipes]);

  const handleSaveRecipe = (recipe: Recipe) => {
    const success = saveRecipe(recipe);
    if (success) {
      setSavedStates(prev => ({ ...prev, [recipe.title]: true }));
             setActionFeedback(prev => ({ ...prev, [`${recipe.title}-save`]: t('recipes.actions.saved') }));
      setTimeout(() => {
        setActionFeedback(prev => {
          const newState = { ...prev };
          delete newState[`${recipe.title}-save`];
          return newState;
        });
      }, 2000);
    } else {
             setActionFeedback(prev => ({ ...prev, [`${recipe.title}-save`]: t('recipes.actions.failed') }));
    }
  };

  const handleShareRecipe = async (recipe: Recipe) => {
    const success = await shareRecipe(recipe);
    if (success) {
             setActionFeedback(prev => ({ ...prev, [`${recipe.title}-share`]: t('recipes.actions.shared') }));
      } else {
       setActionFeedback(prev => ({ ...prev, [`${recipe.title}-share`]: t('recipes.actions.failed') }));
    }
    setTimeout(() => {
      setActionFeedback(prev => {
        const newState = { ...prev };
        delete newState[`${recipe.title}-share`];
        return newState;
      });
    }, 2000);
  };

  const handlePrintRecipe = (recipe: Recipe) => {
    const success = printRecipe(recipe);
    if (success) {
             setActionFeedback(prev => ({ ...prev, [`${recipe.title}-print`]: t('recipes.actions.printed') }));
      } else {
       setActionFeedback(prev => ({ ...prev, [`${recipe.title}-print`]: t('recipes.actions.failed') }));
    }
    setTimeout(() => {
      setActionFeedback(prev => {
        const newState = { ...prev };
        delete newState[`${recipe.title}-print`];
        return newState;
      });
    }, 2000);
  };
  
  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-center gap-3 text-orange-600 dark:text-orange-400">
          <div className="w-6 h-6 border-2 border-orange-600 border-t-transparent rounded-full animate-spin"></div>
                     <span className="text-lg font-medium">{t('recipes.loading')}</span>
        </div>
        
        {/* Skeleton loading */}
        <div className="space-y-4">
          {[1, 2].map((i) => (
            <div key={i} className="bg-gray-100 dark:bg-gray-700 rounded-xl p-6 animate-pulse">
              <div className="h-6 bg-gray-200 dark:bg-gray-600 rounded mb-3"></div>
              <div className="h-4 bg-gray-200 dark:bg-gray-600 rounded mb-4 w-3/4"></div>
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 dark:bg-gray-600 rounded w-1/2"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-600 rounded w-2/3"></div>
                <div className="h-4 bg-gray-200 dark:bg-gray-600 rounded w-1/3"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }
  
  if (!recipes || recipes.length === 0) {
    return (
      <div className="text-center py-8">
        <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        </div>
        <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
                     {t('recipes.noRecipes')}
          </h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
           {t('recipes.noRecipesText')}
        </p>
      </div>
    );
  }
  
  return (
    <div className="space-y-6">
      {/* Clear Recipes Button */}
      {onClear && (
        <div className="flex justify-end">
          <button
            onClick={onClear}
            className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-sm font-medium flex items-center gap-2"
            title={t('common.clearAll')}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            <span className="hidden sm:inline">{t('common.clearAll')}</span>
            <span className="sm:hidden">{t('common.clearAll')}</span>
          </button>
        </div>
      )}
      
      {/* Recipe Cards */}
      <div className="space-y-6">
        {recipes.map((recipe, idx) => (
          <div key={idx} className="bg-gradient-to-br from-white to-orange-50 dark:from-gray-700 dark:to-gray-800 rounded-2xl p-6 shadow-lg border border-orange-200 dark:border-gray-600 hover:shadow-xl transition-all duration-200">
            {/* Recipe Header */}
            <div className="mb-4">
              <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                {recipe.title}
              </h3>
              <p className="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
                {recipe.description}
              </p>
            </div>
            
            {/* Recipe Meta */}
            <div className="flex flex-wrap gap-4 mb-4 text-sm">
              {recipe.prepTime && (
                <div className="flex items-center gap-2 text-orange-600 dark:text-orange-400">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span className="font-medium">{t('recipes.sections.prepTime')}: {recipe.prepTime}</span>
                </div>
              )}
              {recipe.cookTime && (
                <div className="flex items-center gap-2 text-red-600 dark:text-red-400">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  <span className="font-medium">{t('recipes.sections.cookTime')}: {recipe.cookTime}</span>
                </div>
              )}
            </div>
            
            {/* Ingredients Section */}
            {recipe.ingredients && recipe.ingredients.length > 0 && (
              <div className="mb-4">
                <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-3 flex items-center gap-2">
                  <svg className="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                  {t('recipes.sections.ingredients')}
                </h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                  {recipe.ingredients.map((ingredient, i) => (
                    <div key={i} className="flex items-center gap-2 text-sm">
                      <div className="w-2 h-2 bg-orange-500 rounded-full flex-shrink-0"></div>
                      <span className="text-gray-700 dark:text-gray-300">{formatIngredient(ingredient)}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Instructions Section */}
            {recipe.instructions && (
              <div>
                <button
                  onClick={() => {
                    const newExpanded = { ...expandedInstructions };
                    newExpanded[recipe.title] = !newExpanded[recipe.title];
                    setExpandedInstructions(newExpanded);
                  }}
                  className="w-full flex items-center justify-between text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer border border-transparent hover:border-gray-200 dark:hover:border-gray-500 mb-3"
                >
                  <h4 className="font-semibold text-gray-900 dark:text-gray-100 text-sm flex items-center gap-2">
                    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    {t('recipes.sections.instructions')}
                    <span className="text-xs text-gray-500 font-normal">
                      ({Array.isArray(recipe.instructions) ? recipe.instructions.length : 1} {t('errors.steps')})
                    </span>
                    <span className="text-xs text-gray-500 ml-2">
                      {expandedInstructions[recipe.title] ? t('errors.hide') : t('errors.show')}
                    </span>
                    <svg 
                      className={`w-4 h-4 text-gray-500 transition-transform duration-200 ${
                        expandedInstructions[recipe.title] ? 'rotate-180' : ''
                      }`} 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </h4>
                </button>
                
                <div className={`overflow-hidden transition-all duration-300 ease-in-out ${
                  expandedInstructions[recipe.title] ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                }`}>
                  <div className="bg-gray-50 dark:bg-gray-800 rounded-xl p-4">
                    {Array.isArray(recipe.instructions) ? (
                      <ol className="list-decimal list-inside space-y-3 text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                        {recipe.instructions.map((step, index) => (
                          <li key={index} className="pl-2">
                            {step}
                          </li>
                        ))}
                      </ol>
                    ) : (
                      <div className="whitespace-pre-line text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                        {recipe.instructions}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
            
            {/* Recipe Actions */}
            <div className="mt-6 flex flex-wrap gap-3">
              <button 
                onClick={() => handleSaveRecipe(recipe)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors text-sm font-medium ${
                  savedStates[recipe.title] ? 'bg-green-500 text-white hover:bg-green-600' : 'bg-orange-500 text-white hover:bg-orange-600'
                }`}
                title={savedStates[recipe.title] ? t('recipes.actions.saved') : t('recipes.actions.save')}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                <span className="hidden sm:inline">{t('recipes.actions.save')}</span>
                <span className="sm:hidden">{t('common.save')}</span>
                {actionFeedback[`${recipe.title}-save`] && (
                  <span className="ml-2 text-xs font-medium">{actionFeedback[`${recipe.title}-save`]}</span>
                )}
              </button>
              
              <button 
                onClick={() => handleShareRecipe(recipe)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors text-sm font-medium ${
                  actionFeedback[`${recipe.title}-share`] === t('recipes.actions.shared') ? 'bg-blue-500 text-white hover:bg-blue-600' : 'bg-purple-500 text-white hover:bg-purple-600'
                }`}
                title={actionFeedback[`${recipe.title}-share`] === t('recipes.actions.shared') ? t('recipes.actions.shared') : t('recipes.actions.share')}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                <span className="hidden sm:inline">{t('recipes.actions.share')}</span>
                <span className="sm:hidden">Share</span>
                {actionFeedback[`${recipe.title}-share`] && (
                  <span className="ml-2 text-xs font-medium">{actionFeedback[`${recipe.title}-share`]}</span>
                )}
              </button>
              
              <button 
                onClick={() => handlePrintRecipe(recipe)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors text-sm font-medium ${
                  actionFeedback[`${recipe.title}-print`] === t('recipes.actions.printed') ? 'bg-gray-500 text-white hover:bg-gray-600' : 'bg-gray-300 text-gray-700 dark:text-gray-300 hover:bg-gray-400 dark:hover:bg-gray-600'
                }`}
                title={actionFeedback[`${recipe.title}-print`] === t('recipes.actions.printed') ? t('recipes.actions.printed') : t('recipes.actions.print')}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                </svg>
                <span className="hidden sm:inline">{t('recipes.actions.print')}</span>
                <span className="sm:hidden">Print</span>
                {actionFeedback[`${recipe.title}-print`] && (
                  <span className="ml-2 text-xs font-medium">{actionFeedback[`${recipe.title}-print`]}</span>
                )}
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
} 