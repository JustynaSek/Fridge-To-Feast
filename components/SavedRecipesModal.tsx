"use client";

import { useState, useEffect, useRef } from "react";
import { createPortal } from "react-dom";
import { Recipe } from "./RecipeDisplay";
import { useLanguage } from "./LanguageContext";

interface SavedRecipesModalProps {
  onClose: () => void;
}

// Helper function to format ingredients
const formatIngredient = (ingredient: string | { ingredient: string; quantity: string }): string => {
  if (typeof ingredient === 'string') {
    return ingredient;
  }
  return `${ingredient.quantity} ${ingredient.ingredient}`;
};

// Helper function to format instructions
const formatInstructions = (instructions: string | string[]): string => {
  if (typeof instructions === 'string') {
    return instructions;
  }
  return instructions.map((step, index) => `${index + 1}. ${step}`).join('\n\n');
};

// Helper function to share recipe
const shareRecipe = async (recipe: Recipe) => {
  const recipeText = `
${recipe.title}

${recipe.description}

INGREDIENTS:
${Array.isArray(recipe.ingredients) ? recipe.ingredients.map(formatIngredient).join('\n') : recipe.ingredients}

INSTRUCTIONS:
${formatInstructions(recipe.instructions)}

Prep Time: ${recipe.prepTime}
Cook Time: ${recipe.cookTime}

Generated by Fridge to Feast
  `.trim();

  if (navigator.share) {
    try {
      await navigator.share({
        title: recipe.title,
        text: recipeText,
        url: window.location.href
      });
      return true;
    } catch (error) {
      console.error('Share failed:', error);
      return false;
    }
  } else {
    // Fallback: copy to clipboard
    try {
      await navigator.clipboard.writeText(recipeText);
      return true;
    } catch (error) {
      console.error('Clipboard copy failed:', error);
      return false;
    }
  }
};

// Helper function to print recipe
const printRecipe = (recipe: Recipe) => {
  try {
    // Try to open a new window for printing
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      // If popup is blocked, create a downloadable HTML file for mobile
      console.warn('Popup blocked, creating downloadable HTML file');
      
      const recipeHtml = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${recipe.title}</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              line-height: 1.6;
              color: #333;
            }
            .recipe-header { text-align: center; margin-bottom: 30px; }
            .recipe-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; color: #f97316; }
            .recipe-description { color: #666; margin-bottom: 20px; font-style: italic; }
            .recipe-meta { display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; flex-wrap: wrap; }
            .recipe-meta span { background: #f3f4f6; padding: 5px 10px; border-radius: 5px; }
            .section { margin-bottom: 25px; }
            .section-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; border-bottom: 2px solid #f97316; padding-bottom: 5px; color: #f97316; }
            .ingredients-list { list-style: none; padding: 0; }
            .ingredients-list li { padding: 8px 0; border-bottom: 1px solid #eee; }
            .instructions-list { list-style: decimal; padding-left: 20px; }
            .instructions-list li { margin-bottom: 12px; line-height: 1.5; }
            .footer { text-align: center; margin-top: 40px; color: #666; font-size: 12px; border-top: 1px solid #eee; padding-top: 20px; }
            @media print { 
              body { margin: 0; }
              .recipe-title { color: #000 !important; }
              .section-title { color: #000 !important; }
            }
            @media screen and (max-width: 600px) {
              body { margin: 10px; }
              .recipe-title { font-size: 20px; }
              .recipe-meta { flex-direction: column; gap: 10px; }
            }
          </style>
        </head>
        <body>
          <div class="recipe-header">
            <div class="recipe-title">${recipe.title}</div>
            <div class="recipe-description">${recipe.description}</div>
            <div class="recipe-meta">
              <span>Prep: ${recipe.prepTime}</span>
              <span>Cook: ${recipe.cookTime}</span>
            </div>
          </div>
          
          <div class="section">
            <div class="section-title">Ingredients</div>
            <ul class="ingredients-list">
              ${Array.isArray(recipe.ingredients) ? recipe.ingredients.map(formatIngredient).map(ing => `<li>${ing}</li>`).join('') : `<li>${recipe.ingredients}</li>`}
            </ul>
          </div>
          
          <div class="section">
            <div class="section-title">Instructions</div>
            <ol class="instructions-list">
              ${Array.isArray(recipe.instructions) ? recipe.instructions.map(step => `<li>${step}</li>`).join('') : `<li>${recipe.instructions}</li>`}
            </ol>
          </div>
          
          <div class="footer">
            Generated by Fridge to Feast
          </div>
        </body>
        </html>
      `;

      // Create a downloadable file
      const blob = new Blob([recipeHtml], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${recipe.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      return true;
    }

    const recipeHtml = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${recipe.title}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            line-height: 1.6;
            color: #333;
          }
          .recipe-header { text-align: center; margin-bottom: 30px; }
          .recipe-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; color: #f97316; }
          .recipe-description { color: #666; margin-bottom: 20px; font-style: italic; }
          .recipe-meta { display: flex; justify-content: center; gap: 20px; margin-bottom: 30px; flex-wrap: wrap; }
          .recipe-meta span { background: #f3f4f6; padding: 5px 10px; border-radius: 5px; }
          .section { margin-bottom: 25px; }
          .section-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; border-bottom: 2px solid #f97316; padding-bottom: 5px; color: #f97316; }
          .ingredients-list { list-style: none; padding: 0; }
          .ingredients-list li { padding: 8px 0; border-bottom: 1px solid #eee; }
          .instructions-list { list-style: decimal; padding-left: 20px; }
          .instructions-list li { margin-bottom: 12px; line-height: 1.5; }
          .footer { text-align: center; margin-top: 40px; color: #666; font-size: 12px; border-top: 1px solid #eee; padding-top: 20px; }
          @media print { 
            body { margin: 0; }
            .recipe-title { color: #000 !important; }
            .section-title { color: #000 !important; }
          }
          @media screen and (max-width: 600px) {
            body { margin: 10px; }
            .recipe-title { font-size: 20px; }
            .recipe-meta { flex-direction: column; gap: 10px; }
          }
        </style>
      </head>
      <body>
        <div class="recipe-header">
          <div class="recipe-title">${recipe.title}</div>
          <div class="recipe-description">${recipe.description}</div>
          <div class="recipe-meta">
            <span>Prep: ${recipe.prepTime}</span>
            <span>Cook: ${recipe.cookTime}</span>
          </div>
        </div>
        
        <div class="section">
          <div class="section-title">Ingredients</div>
          <ul class="ingredients-list">
            ${Array.isArray(recipe.ingredients) ? recipe.ingredients.map(formatIngredient).map(ing => `<li>${ing}</li>`).join('') : `<li>${recipe.ingredients}</li>`}
          </ul>
        </div>
        
        <div class="section">
          <div class="section-title">Instructions</div>
          <ol class="instructions-list">
            ${Array.isArray(recipe.instructions) ? recipe.instructions.map(step => `<li>${step}</li>`).join('') : `<li>${recipe.instructions}</li>`}
          </ol>
        </div>
        
        <div class="footer">
          Generated by Fridge to Feast
        </div>
      </body>
      </html>
    `;

    printWindow.document.write(recipeHtml);
    printWindow.document.close();
    
    // Wait a bit for the content to load, then print
    setTimeout(() => {
      printWindow.focus();
      printWindow.print();
    }, 100);
    
    return true;
  } catch (error) {
    console.error('Print failed:', error);
    return false;
  }
};

// Helper function to delete recipe
const deleteRecipe = (recipeTitle: string) => {
  try {
    const savedRecipes = JSON.parse(localStorage.getItem('savedRecipes') || '[]');
    const filteredRecipes = savedRecipes.filter((r: Recipe) => r.title !== recipeTitle);
    localStorage.setItem('savedRecipes', JSON.stringify(filteredRecipes));
    return true;
  } catch (error) {
    console.error('Failed to delete recipe:', error);
    return false;
  }
};

export default function SavedRecipesModal({ onClose }: SavedRecipesModalProps) {
  const [savedRecipes, setSavedRecipes] = useState<Recipe[]>([]);
  const [mounted, setMounted] = useState(false);
  const [actionFeedback, setActionFeedback] = useState<{ [key: string]: string }>({});
  const [expandedInstructions, setExpandedInstructions] = useState<{ [key: string]: boolean }>({});
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { t } = useLanguage();

  useEffect(() => {
    setMounted(true);
  }, []);

  // Prevent body scroll when modal is open
  useEffect(() => {
    if (mounted) {
      document.body.style.overflow = 'hidden';
      return () => {
        document.body.style.overflow = 'unset';
      };
    }
  }, [mounted]);

  // Load saved recipes
  useEffect(() => {
    try {
      const saved = JSON.parse(localStorage.getItem('savedRecipes') || '[]');
      setSavedRecipes(saved);
    } catch (error) {
      console.error('Failed to load saved recipes:', error);
      setSavedRecipes([]);
    }
  }, []);

  // Handle escape key to close modal
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, [onClose]);

  // Handle click outside to close modal
  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const handleShareRecipe = async (recipe: Recipe) => {
    const success = await shareRecipe(recipe);
    if (success) {
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.recipeShared') }));
    } else {
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.shareFailed') }));
    }
    setTimeout(() => {
      setActionFeedback(prev => {
        const newState = { ...prev };
        delete newState[recipe.title];
        return newState;
      });
    }, 2000);
  };

  const handlePrintRecipe = (recipe: Recipe) => {
    const success = printRecipe(recipe);
    if (success) {
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.printDialogOpened') }));
    } else {
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.printFailed') }));
    }
    setTimeout(() => {
      setActionFeedback(prev => {
        const newState = { ...prev };
        delete newState[recipe.title];
        return newState;
      });
    }, 2000);
  };

  const handleDeleteRecipe = (recipe: Recipe) => {
    const success = deleteRecipe(recipe.title);
    if (success) {
      setSavedRecipes(prev => prev.filter(r => r.title !== recipe.title));
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.recipeDeleted') }));
      setTimeout(() => {
        setActionFeedback(prev => {
          const newState = { ...prev };
          delete newState[recipe.title];
          return newState;
        });
      }, 2000);
    } else {
             setActionFeedback(prev => ({ ...prev, [recipe.title]: t('savedRecipes.deleteFailed') }));
    }
  };

  // Export recipes to JSON file
  const handleExportRecipes = () => {
    try {
      const exportData = {
        recipes: savedRecipes,
        exportDate: new Date().toISOString(),
        version: '1.0',
        app: 'Fridge to Feast'
      };
      
      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `fridge-to-feast-recipes-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
             setActionFeedback(prev => ({ ...prev, 'export': t('savedRecipes.recipesExported') }));
      setTimeout(() => {
        setActionFeedback(prev => {
          const newState = { ...prev };
          delete newState['export'];
          return newState;
        });
      }, 2000);
    } catch (error) {
      console.error('Export failed:', error);
             setActionFeedback(prev => ({ ...prev, 'export': t('savedRecipes.exportFailed') }));
    }
  };

  // Import recipes from JSON file
  const handleImportRecipes = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const importData = JSON.parse(content);
        
        // Validate import data
        if (!importData.recipes || !Array.isArray(importData.recipes)) {
          throw new Error('Invalid file format');
        }

        // Merge with existing recipes (avoid duplicates)
        const existingRecipes = JSON.parse(localStorage.getItem('savedRecipes') || '[]');
        const existingTitles = new Set(existingRecipes.map((r: Recipe) => r.title));
        
        const newRecipes = importData.recipes.filter((recipe: Recipe) => !existingTitles.has(recipe.title));
        const mergedRecipes = [...existingRecipes, ...newRecipes];
        
        localStorage.setItem('savedRecipes', JSON.stringify(mergedRecipes));
        setSavedRecipes(mergedRecipes);
        
        setActionFeedback(prev => ({ 
          ...prev, 
                     'import': `${t('savedRecipes.imported')} ${newRecipes.length} ${t('savedRecipes.newRecipes')}`  
        }));
        setTimeout(() => {
          setActionFeedback(prev => {
            const newState = { ...prev };
            delete newState['import'];
            return newState;
          });
        }, 3000);
      } catch (error) {
        console.error('Import failed:', error);
                 setActionFeedback(prev => ({ ...prev, 'import': t('savedRecipes.importFailedInvalidFile') }));
        setTimeout(() => {
          setActionFeedback(prev => {
            const newState = { ...prev };
            delete newState['import'];
            return newState;
          });
        }, 3000);
      }
    };
    reader.readAsText(file);
    
    // Reset input
    event.target.value = '';
  };

  // Clear all recipes
  const handleClearAllRecipes = () => {
         if (window.confirm(t('savedRecipes.confirmClearAllRecipes'))) {
      try {
        localStorage.removeItem('savedRecipes');
        setSavedRecipes([]);
                 setActionFeedback(prev => ({ ...prev, 'clear': t('savedRecipes.allRecipesCleared') }));
        setTimeout(() => {
          setActionFeedback(prev => {
            const newState = { ...prev };
            delete newState['clear'];
            return newState;
          });
        }, 2000);
      } catch (error) {
        console.error('Clear failed:', error);
                 setActionFeedback(prev => ({ ...prev, 'clear': t('savedRecipes.clearFailed') }));
      }
    }
  };

  // Handle import button click
  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  const modalContent = (
    <div 
      className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-[9999]"
      onClick={handleBackdropClick}
    >
      <div className="bg-white dark:bg-gray-800 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-2xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
                         {t('savedRecipes.savedRecipes')}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[60vh]">
          {savedRecipes.length === 0 ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                                 {t('savedRecipes.noSavedRecipesYet')}
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                                 {t('savedRecipes.saveYourFavoriteRecipesToSeeThemHere')}
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {savedRecipes.map((recipe, index) => (
                <div key={index} className="bg-gray-50 dark:bg-gray-700 rounded-xl p-4 border border-gray-200 dark:border-gray-600">
                  {/* Recipe Header */}
                  <div className="mb-3">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                      {recipe.title}
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-300">
                      {recipe.description}
                    </p>
                  </div>
                  
                  {/* Recipe Meta */}
                  <div className="flex flex-wrap gap-4 mb-3 text-xs">
                    {recipe.prepTime && (
                      <span className="text-orange-600 dark:text-orange-400">
                                                 {t('savedRecipes.prep')}: {recipe.prepTime}
                      </span>
                    )}
                    {recipe.cookTime && (
                      <span className="text-red-600 dark:text-red-400">
                                                 {t('savedRecipes.cook')}: {recipe.cookTime}
                      </span>
                    )}
                  </div>
                  
                  {/* Ingredients Section */}
                  {recipe.ingredients && recipe.ingredients.length > 0 && (
                    <div className="mb-4">
                      <h4 className="font-semibold text-gray-900 dark:text-gray-100 mb-2 text-sm flex items-center gap-2">
                        <svg className="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                        {t('recipes.sections.ingredients')}
                      </h4>
                      <div className="grid grid-cols-1 gap-1">
                        {recipe.ingredients.map((ingredient, i) => (
                          <div key={i} className="flex items-center gap-2 text-xs">
                            <div className="w-1.5 h-1.5 bg-orange-500 rounded-full flex-shrink-0"></div>
                            <span className="text-gray-700 dark:text-gray-300">{formatIngredient(ingredient)}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Instructions Section */}
                  {recipe.instructions && (
                    <div className="mb-4">
                      <button
                        onClick={() => {
                          const newExpanded = { ...expandedInstructions };
                          newExpanded[recipe.title] = !newExpanded[recipe.title];
                          setExpandedInstructions(newExpanded);
                        }}
                        className="w-full flex items-center justify-between text-left p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer border border-transparent hover:border-gray-200 dark:hover:border-gray-500"
                      >
                        <h4 className="font-semibold text-gray-900 dark:text-gray-100 text-sm flex items-center gap-2">
                          <svg className="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                          </svg>
                          {t('recipes.sections.instructions')}
                          <span className="text-xs text-gray-500 font-normal">
                            ({Array.isArray(recipe.instructions) ? recipe.instructions.length : 1} {t('errors.steps')})
                          </span>
                          <span className="text-xs text-gray-500 ml-2">
                            {expandedInstructions[recipe.title] ? t('errors.hide') : t('errors.show')}
                          </span>
                          <svg 
                            className={`w-4 h-4 text-gray-500 transition-transform duration-200 ${
                              expandedInstructions[recipe.title] ? 'rotate-180' : ''
                            }`} 
                            fill="none" 
                            stroke="currentColor" 
                            viewBox="0 0 24 24"
                          >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </h4>
                      </button>
                      
                      <div className={`overflow-hidden transition-all duration-300 ease-in-out ${
                        expandedInstructions[recipe.title] ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                      }`}>
                        <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                          {Array.isArray(recipe.instructions) ? (
                            <ol className="list-decimal list-inside space-y-2 text-xs text-gray-700 dark:text-gray-300 leading-relaxed">
                              {recipe.instructions.map((step, index) => (
                                <li key={index} className="pl-1">
                                  {step}
                                </li>
                              ))}
                            </ol>
                          ) : (
                            <div className="whitespace-pre-line text-xs text-gray-700 dark:text-gray-300 leading-relaxed">
                              {recipe.instructions}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Recipe Actions */}
                  <div className="flex flex-wrap gap-2 mt-4">
                    <button
                      onClick={() => handleShareRecipe(recipe)}
                      className="flex items-center gap-1 px-3 py-1 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors text-xs"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                      </svg>
                                             {t('savedRecipes.share')}
                    </button>
                    
                    <button
                      onClick={() => handlePrintRecipe(recipe)}
                      className="flex items-center gap-1 px-3 py-1 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors text-xs"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                      </svg>
                                             {t('savedRecipes.print')}
                    </button>
                    
                    <button
                      onClick={() => handleDeleteRecipe(recipe)}
                      className="flex items-center gap-1 px-3 py-1 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-xs"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                                             {t('savedRecipes.delete')}
                    </button>
                  </div>
                  
                  {/* Action Feedback */}
                  {actionFeedback[recipe.title] && (
                    <div className="mt-2 text-xs text-green-600 dark:text-green-400">
                      {actionFeedback[recipe.title]}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 sm:p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700 gap-4">
          <div className="text-xs text-gray-500 dark:text-gray-400 order-2 sm:order-1">
            {t('savedRecipes.savedRecipesCount', { count: savedRecipes.length })}
          </div>
          
          {/* Action Feedback Messages */}
          <div className="flex-1 mx-4 order-3 sm:order-2">
            {actionFeedback['export'] && (
              <div className="text-xs text-green-600 dark:text-green-400 text-center">
                {actionFeedback['export']}
              </div>
            )}
            {actionFeedback['import'] && (
              <div className="text-xs text-blue-600 dark:text-blue-400 text-center">
                {actionFeedback['import']}
              </div>
            )}
            {actionFeedback['clear'] && (
              <div className="text-xs text-red-600 dark:text-red-400 text-center">
                {actionFeedback['clear']}
              </div>
            )}
          </div>
          
          <div className="flex flex-wrap gap-2 order-1 sm:order-3 w-full sm:w-auto justify-center sm:justify-end">
            {/* Hidden file input for import */}
            <input
              type="file"
              accept=".json"
              onChange={handleImportRecipes}
              className="hidden"
              ref={fileInputRef}
            />
            
            {/* Import Button */}
            <button
              onClick={handleImportClick}
              className="px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-sm shadow-sm font-medium"
            >
              {t('savedRecipes.import')}
            </button>
            
            {/* Export Button */}
            <button
              onClick={handleExportRecipes}
              disabled={savedRecipes.length === 0}
              className={`px-3 py-2 rounded-lg transition-colors text-sm shadow-sm font-medium ${
                savedRecipes.length === 0
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              {t('savedRecipes.export')}
            </button>
            
            {/* Clear All Button */}
            <button
              onClick={handleClearAllRecipes}
              disabled={savedRecipes.length === 0}
              className={`px-3 py-2 rounded-lg transition-colors text-sm shadow-sm font-medium ${
                savedRecipes.length === 0
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-red-500 text-white hover:bg-red-600'
              }`}
            >
              {t('savedRecipes.clearAll')}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  if (!mounted) {
    return null;
  }

  return createPortal(modalContent, document.body);
} 